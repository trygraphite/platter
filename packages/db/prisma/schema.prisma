datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

// user = restaurant
model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  
  // Common fields
  phone           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isActive        Boolean     @default(true)
  
  // Auth relations - needed for all users
  sessions        Session[]
  accounts        Account[]
  
  // User type and role management
  userType        UserType    @default(RESTAURANT)
  role            UserRole?   @default(RESTAURANT)
  staffRole       StaffRole?  // Used when userType is STAFF
  restaurantRole  UserRole?   

  // Restaurant-specific fields
  website         String?
  googleReviewLink String?
  image           String?
  icon            String?
  address         String?
  city            String?
  subdomain       String?     @unique
  state           String?
  zipCode         String?
  description     String?
  seatingCapacity Int?
  cuisine         String?
  openingHours    String?
  closingHours    String?
  emailVerified   Boolean?    
  hasCompletedOnboarding Boolean @default(false)

  // Staff-specific fields
  // position        String?
  
  // Restaurant relations (only applicable when userType is RESTAURANT)
  tables          Table[]
  categories      Category[]
  menuItems       MenuItem[]
  menuItemVarieties MenuItemVariety[]
  orders          Order[]
  qrCodes         QRCode[]
  reviews         Review[]   
  complaints      Complaint[] 
  locationId      String?     // Optional: If the restaurant is part of a location
  location        Location?   @relation(fields: [locationId], references: [id])
  joinRequests    JoinRequest[]
  CategoryGroup   CategoryGroup[]
  servicePoints   ServicePoint[]
  
  
  // Staff relations
  staff           Staff[]   
  restaurantId    String?     // The restaurant this staff member belongs to

  // Staff-specific permissions
  canManageMenu   Boolean?    @default(false)
  canManageOrders Boolean?    @default(false)
  canManageTables Boolean?    @default(false)
  canViewReports  Boolean?    @default(false)
  
  @@index([userType])
  @@index([restaurantId])
}

// Auth tables
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffId   String?
  
  role      AuthRole? // Combined role enum for both users and staff

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  userId                String?
  user                  User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffId               String?

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Location {
  id          String   @id @default(uuid())
  name        String   // Name of the location (e.g., "Downtown Food Truck Park")
  address     String   // Address of the location
  city        String?
  state       String?
  zipCode     String?
  seatingCapacity Int?
  description String?  // Optional description of the location
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]   // Restaurants in this location
  qrCodes     QRCode[] // QR codes for tables in this location
  table       Table[]
  joinRequests JoinRequest[]
}

model QRCode {
  id           String    @id @default(uuid())
  target       String    // What the QR code is for (table, menu, etc)
  targetNumber String?    // The specific number/identifier of the target
  link         String?   // Optional URL the QR code points to
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
 
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  table      Table?       @relation(fields: [tableId], references: [id])
  tableId    String?
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
  reviews    Review[]
  complaints Complaint[]


}


model Table {
  id          String   @id @default(uuid())
  number      String   
  capacity    Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId          String
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

    // Staff assignments
  staffAssignments StaffTable[]


  qrCodes      QRCode[]
  orders       Order[]
  review       Review[]
  complaint    Complaint[]
}

model CategoryGroup {
  id          String     @id @default(uuid())
  name        String
  description String?
  position    Int        @default(0)  
  isActive    Boolean    @default(true)
  deletedAt   DateTime?  // Soft delete field
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  categories  Category[]

  @@unique([userId, name])
  @@index([deletedAt]) // Index for efficient querying of non-deleted items
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  position      Int           @default(0)  
  isActive      Boolean       @default(true)
  deletedAt     DateTime?     // Soft delete field
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  image         String?
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  menuItems     MenuItem[]
  
  categoryGroup CategoryGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId       String?

  @@unique([userId, name])
  @@index([deletedAt]) // Index for efficient querying of non-deleted items
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Int
  image       String?
  position    Int      @default(0)  
  isAvailable Boolean  @default(true)
  hasVarieties Boolean @default(false)
  deletedAt   DateTime? // Soft delete field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  userId      String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade) 
  categoryId  String
  
  // Service point assignment
  servicePointId String?
  servicePoint   ServicePoint? @relation(fields: [servicePointId], references: [id])
  
  orderItems  OrderItem[]
  varieties   MenuItemVariety[]

  @@index([userId, categoryId])
  @@index([deletedAt]) // Index for efficient querying of non-deleted items
}

model MenuItemVariety {
  id          String   @id @default(uuid())
  name        String   // e.g., "Small", "Medium", "Large"
  description String?  // Optional description for the variety
  price       Int      // Price for this specific variety
  position    Int      @default(0)
  isAvailable Boolean  @default(true)
  isDefault   Boolean  @default(false) // Mark one variety as default
  deletedAt   DateTime? // Soft delete field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]

  @@unique([menuItemId, name]) // Ensure unique variety names per menu item
  @@index([menuItemId])
  @@index([deletedAt]) // Index for efficient querying of non-deleted items
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     Int?      
  status          OrderStatus @default(PENDING)
  totalAmount     Int
  specialNotes    String?

  shownReview     Boolean?  @default(false)

  // Status timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  confirmedAt     DateTime?
  preparingAt     DateTime?
  readyAt         DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?

  // Time metrics (in minutes)
  confirmationTime Int?       // Time between created and confirmed
  preparationTime  Int?       // Time between confirmed and ready
  deliveryTime     Int?       // Time between ready and delivered
  totalTime        Int?       // Total time from creation to delivery

  // Relationsc
  orderType       OrderType   @default(TABLE)
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  table           Table?       @relation(fields: [tableId], references: [id])
  tableId         String?
  items           OrderItem[]
  review          Review?
  
   // Optional staff assignment
  staffId         String?
  staff           Staff?      @relation(fields: [staffId], references: [id])

  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  price        Int      // Price at time of order (from variety or base menu item)
  specialNotes String?
  status       OrderItemStatus @default(PENDING) // Status of this specific item
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Status timestamps for individual items
  confirmedAt  DateTime?
  preparingAt  DateTime?
  readyAt      DateTime?
  deliveredAt  DateTime?
  cancelledAt  DateTime?
  
  // Relations
  order         Order              @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId       String
  menuItem      MenuItem           @relation(fields: [menuItemId], references: [id], onDelete: Restrict)
  menuItemId    String
  variety       MenuItemVariety?   @relation(fields: [varietyId], references: [id], onDelete: Restrict) // Optional variety
  varietyId     String?
}
model Review {
  id      String  @id @default(uuid())
  rating  Int     @default(5)
  comment String?

  // Relations
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @unique
  qrCode    QRCode? @relation(fields: [qrCodeId], references: [id], onDelete: SetNull)
  qrCodeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  table       Table?     @relation(fields: [tableId], references: [id])
  tableId     String?
}

model Complaint {
  id        String          @id @default(uuid())
  content   String
  category  String?
  status    ComplaintStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  qrCode    QRCode? @relation(fields: [qrCodeId], references: [id], onDelete: SetNull)
  qrCodeId  String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  table       Table?     @relation(fields: [tableId], references: [id])
  tableId     String?
}

model JoinRequest {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  locationId  String
  location    Location    @relation(fields: [locationId], references: [id])
  status      RequestStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ServicePoint {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  menuItems   MenuItem[]
  staff       ServicePointStaff[]

  @@index([userId])
}

model ServicePointStaff {
  id            String   @id @default(cuid())
  servicePointId String
  staffId       String
  role          String?
  isActive      Boolean  @default(true)
  assignedAt    DateTime @default(now())

  // Relations
  servicePoint  ServicePoint @relation(fields: [servicePointId], references: [id], onDelete: Cascade)
  staff         Staff        @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([servicePointId, staffId])
  @@index([servicePointId])
  @@index([staffId])
}

model Staff {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  phone           String?
  password        String?    
  // Staff-specific fields
  position        String?
  staffRole       StaffRole   @default(STAFF)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isActive        Boolean     @default(true)
  
  // Staff permissions
  canManageMenu   Boolean     @default(false)
  canManageOrders Boolean     @default(false)
  canManageTables Boolean     @default(false)
  canViewReports  Boolean     @default(false)
  
  // Relations
  restaurantId    String
  restaurant      User        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Staff auth relations (separate from restaurant auth)
  staffSessions   StaffSession[]
  
  // Optional relations to orders and tables
  orders          Order[]     // Orders handled by this staff member
  assignedTables  StaffTable[] // Tables assigned to this staff member
  
  // Service point relations
  servicePointStaff ServicePointStaff[]
  
  @@index([restaurantId])
  @@index([staffRole])
}

model StaffSession {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@map("staff_session")
}

// Junction table for staff-table assignments (optional)
model StaffTable {
  id       String @id @default(cuid())
  staffId  String
  tableId  String
  
  staff    Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  table    Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  
  @@unique([staffId, tableId])
  @@map("staff_table")
}


enum OrderType {
  TABLE
  PICKUP
}
enum StaffRole {
  STAFF
  ADMIN
  MANAGER
  OPERATOR
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERED
  CANCELLED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum UserRole {
  ADMIN
  RESTAURANT
}

enum AuthRole {
  USER_ADMIN
  USER_RESTAURANT
  STAFF
  STAFF_MANAGER
  STAFF_ADMIN
}

enum UserType {
  RESTAURANT
  STAFF
}

enum OrderItemStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
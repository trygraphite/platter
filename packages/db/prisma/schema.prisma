datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// user = restaurant
model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  website         String?
  image           String?
  phone           String?
  address         String?
  city            String?
  subdomain       String?     @unique
  state           String?
  zipCode         String?
  description     String?
  seatingCapacity Int?
  cuisine         String?
  openingHours    String?
  closingHours    String?
  emailVerified   Boolean     
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Auth relations
  sessions        Session[]
  accounts        Account[]
  
  // Restaurant relations moved to User
  tables          Table[]
  categories      Category[]
  menuItems       MenuItem[]
  orders          Order[]
  qrCodes         QRCode[]
  reviews         Review[]   
  complaints      Complaint[] 
}

// Auth tables
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model QRCode {
  id           String    @id @default(uuid())
  target       String    // What the QR code is for (table, menu, etc)
  targetNumber String?    // The specific number/identifier of the target
  link         String?   // Optional URL the QR code points to
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
   user        User     @relation(fields: [userId], references: [id])
    userId        String
  table      Table?       @relation(fields: [tableId], references: [id])
  tableId    String?
  reviews    Review[]
  complaints Complaint[]
}


model Table {
  id          String   @id @default(uuid())
  number      String   @unique
  capacity    Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId          String
  qrCodes      QRCode[]
  orders       Order[]
  review       Review[]
  complaint    Complaint[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
    user        User     @relation(fields: [userId], references: [id])

  userId String
  menuItems    MenuItem[]

  @@unique([userId, name])
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Int
  image       String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
    user        User     @relation(fields: [userId], references: [id])

  userId String
  category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String
  orderItems   OrderItem[]

  @@index([userId, categoryId])
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     Int?      
  status          OrderStatus @default(PENDING)
  totalAmount     Int
  specialNotes    String?

  // Status timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  confirmedAt     DateTime?
  preparingAt     DateTime?
  readyAt         DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?

  // Time metrics (in minutes)
  confirmationTime Int?       // Time between created and confirmed
  preparationTime  Int?       // Time between confirmed and ready
  deliveryTime     Int?       // Time between ready and delivered
  totalTime        Int?       // Total time from creation to delivery

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  table           Table       @relation(fields: [tableId], references: [id])
  tableId         String
  items           OrderItem[]
  review          Review?
  

  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  price        Int  // Price at time of order
  specialNotes String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
}

model Review {
  id      String  @id @default(uuid())
  rating  Int     @default(5)
  comment String?

  // Relations
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @unique
  qrCode    QRCode? @relation(fields: [qrCodeId], references: [id])
  qrCodeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  table       Table?     @relation(fields: [tableId], references: [id])
  tableId     String?
}

model Complaint {
  id        String          @id @default(uuid())
  content   String
  category  String?
  status    ComplaintStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  qrCode   QRCode @relation(fields: [qrCodeId], references: [id])
  qrCodeId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  table       Table?     @relation(fields: [tableId], references: [id])
  tableId     String?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERED
  CANCELLED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}